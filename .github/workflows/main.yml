# name: Nodejs

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]
#   schedule:
#     - cron: "0 * * * *" # Executa a cada hora
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout c√≥digo
#         uses: actions/checkout@v4

#       - name: Configurar Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Instalar depend√™ncias do sistema
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y \
#             wget \
#             gnupg \
#             ca-certificates \
#             apt-transport-https \
#             xvfb \
#             && sudo rm -rf /var/lib/apt/lists/*

#       - name: Instalar Google Chrome
#         run: |
#           wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - \
#           && echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list \
#           && sudo apt-get update \
#           && sudo apt-get install -y google-chrome-stable \
#           && sudo rm -rf /var/lib/apt/lists/*

#       - name: Instalar depend√™ncias do Node.js
#         run: npm update && npm install

#       - name: Cookies
#         env:
#           COOKIES: ${{ secrets.COOKIES }}
#           LOCALSTORAGE: ${{ secrets.LOCALSTORAGE }}
#         run: |
#           echo "$COOKIES" > cookies.json
#           echo "$LOCALSTORAGE" > localstorage.json

#       - name: Executar node index.js
#         env:
#           URL: ${{ secrets.URL }}
#         run: xvfb-run --auto-servernum -- node --trace-warnings cpayu.js

#       - name: Atualiza screen.png
#         env:
#           SENHA_PDF: ${{ secrets.SENHA_PDF }}
#         run: |
#           sudo apt-get update && sudo apt-get install -y img2pdf qpdf
#           img2pdf screen.png -o temp.pdf && qpdf --encrypt $SENHA_PDF $SENHA_PDF 256 -- temp.pdf screen.pdf && rm temp.pdf
#           git config --global user.name "github-actions"
#           git config --global user.email "actions@github.com"
#           git add screen.pdf || echo "Nada para adicionar"
#           git commit -m "Atualiza screen.pdf" || echo "Nada para commitar"


name: Nodejs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 * * * *" # Executa a cada hora
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Instalar depend√™ncias do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget \
            gnupg \
            ca-certificates \
            apt-transport-https \
            xvfb \
            poppler-utils \
            && sudo rm -rf /var/lib/apt/lists/*

      - name: Instalar Google Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          sudo rm -rf /var/lib/apt/lists/*

      - name: Instalar depend√™ncias do Node.js
        run: npm install --no-audit --no-fund

      # - name: Restaurar cookies e localStorage
      #   env:
      #     COOKIES: ${{ secrets.COOKIES }}
      #     LOCALSTORAGE: ${{ secrets.LOCALSTORAGE }}
      #   run: |
      #     echo "$COOKIES" > cookies.json
      #     echo "$LOCALSTORAGE" > localstorage.json
      #     echo "‚úÖ Cookies e localStorage restaurados."

      - name: Executar script principal
        env:
          URL: ${{ secrets.URL }}
        run: |
          echo "üöÄ Executando cpayu.js..."
          xvfb-run --auto-servernum -- node --trace-warnings cpayu.js
          echo "‚úÖ Execu√ß√£o conclu√≠da."
          ls -lh || true

      - name: Verificar screenshot
        run: |
          if [ ! -f screen.png ]; then
            echo "‚ùå ERRO: screen.png n√£o foi gerado!"
            exit 1
          fi
          echo "‚úÖ Screenshot encontrado:"
          ls -lh screen.png

      - name: Gerar e proteger screen.pdf
        env:
          SENHA_PDF: ${{ secrets.SENHA_PDF }}
        run: |
          set -e
          sudo apt-get update && sudo apt-get install -y img2pdf qpdf
          echo "üì∏ Convertendo screen.png para PDF..."

          # Cria PDF b√°sico
          img2pdf screen.png -o screen_raw.pdf

          # Verifica se foi criado corretamente
          if [ ! -s screen_raw.pdf ]; then
            echo "‚ùå ERRO: falha ao gerar PDF!"
            exit 1
          fi

          # Aplica senha apenas se definida
          if [ -n "$SENHA_PDF" ]; then
            echo "üîê Protegendo PDF com senha..."
            if ! qpdf --encrypt "$SENHA_PDF" "$SENHA_PDF" 256 -- screen_raw.pdf screen.pdf; then
              echo "‚ö†Ô∏è Falha ao proteger PDF, mantendo vers√£o sem senha"
              mv screen_raw.pdf screen.pdf
            fi
          else
            echo "‚ö†Ô∏è SENHA_PDF n√£o definida, gerando PDF sem senha."
            mv screen_raw.pdf screen.pdf
          fi

          rm -f screen_raw.pdf
          echo "‚úÖ PDF final gerado:"
          ls -lh screen.pdf

      - name: Verificar PDF gerado
        run: |
          echo "üîç Verificando PDF screen.pdf..."
          if [ ! -f screen.pdf ]; then
            echo "‚ùå screen.pdf n√£o existe!"
            exit 1
          fi

          echo "üìÑ Informa√ß√µes do PDF:"
          pdfinfo screen.pdf || echo "‚ö†Ô∏è Falha ao ler PDF (provavelmente corrompido)"

          tamanho=$(stat -c%s "screen.pdf")
          echo "üìè Tamanho do PDF: $tamanho bytes"

          if [ $tamanho -lt 1000 ]; then
            echo "‚ö†Ô∏è PDF muito pequeno, pode estar vazio ou corrompido"
          else
            echo "‚úÖ PDF parece v√°lido"
          fi

      - name: Commit e push do screen.pdf
        continue-on-error: true
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add screen.pdf || echo "Nada para adicionar"
          git commit -m "üìÑ Atualiza screen.pdf" || echo "Nada para commitar"
          git push --quiet || echo "‚ö†Ô∏è Falha no push (poss√≠vel conflito, ignore se agendado)"

      - name: üì§ Upload do PDF como artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screen-pdf
          path: screen.pdf
          retention-days: 7

#           git push --quiet || echo "Falha no push, provavelmente conflito"


